<#-- export-csv.ftl -->

<#setting locale="en_US">

<#-- Quote a value for CSV and RETURN it as a string -->
<#function csv v>
  <#local s = (v!'')?string>
  <#if s?contains(",") || s?contains('"') || s?contains('\n')>
    <#return '"' + s?replace('"','""') + '"' >
  <#else>
    <#return s>
  </#if>
</#function>

<#-- Build ONE CSV row string (values joined by commas, CRLF at end) -->
<#function row values>
  <#return values?map(x -> csv(x))?join(",") + "\r\n">
</#function>

<#-- Keep the same call shape your Java code expects -->
<#macro writeBlock title accountRows benchmarkRows isAgg aggRows>
  <#nested>
</#macro>

<@writeBlock
  title="Cumulative"
  accountRows=accountMetrics!
  benchmarkRows=benchmarkMetrics!
  isAgg=isAggregated!
  aggRows=aggregatedData!
>
  <#-- copy macro param into a normal var so we can use it in expressions -->
  <#assign blockTitle = title>

  ${ row([ blockTitle ]) }<#t>
  ${ row([
        "Account#", "MTD", "QTD", "YTD", "1-Year",
        "3-Year", "5-Year", "10-Year",
        "Since Inception", "Inception Date"
     ]) }<#t>

  <#-- Data rows -->
  <#list aggRows![] as metric>
    <#-- inceptionDate is either "--" or "dd-MMM-yyyy" string -->
    <#assign incRaw = metric.inceptionDate!"" />
    <#assign incOut =
        (incRaw?has_content && incRaw != "--" && incRaw?matches("^[0-3]?\\d-[A-Za-z]{3}-\\d{4}$"))
          ? (incRaw?date("dd-MMM-yyyy"))?string("yyyy-MM-dd")
          : "" />

    ${ row([
        (metric.accountName?has_content) ? metric.accountName : (metric.accountNumber!''),
        metric.oneMonth!'',          -- MTD
        metric.threeMonth!'',        -- QTD (placeholder until true QTD exists)
        metric.ytd!'',
        metric.oneYear!'',
        metric.threeYear!'',
        metric.fiveYear!'',
        metric.tenYear!'',
        metric.sinceInception!'',
        incOut
      ]) }<#t>
  </#list>
</@writeBlock>
