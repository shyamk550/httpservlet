import jakarta.servlet.*;

import java.io.InputStream;
import java.net.URL;
import java.util.*;

public class ServletContextSimulator implements ServletContext {

    private final Map<String, Object> attributes = new HashMap<>();

    @Override
    public Object getAttribute(String name) {
        return attributes.get(name);
    }

    @Override
    public void setAttribute(String name, Object object) {
        attributes.put(name, object);
    }

    @Override
    public void removeAttribute(String name) {
        attributes.remove(name);
    }

    @Override
    public Enumeration<String> getAttributeNames() {
        return Collections.enumeration(attributes.keySet());
    }

    @Override
    public String getContextPath() {
        return "";
    }

    // Stub the rest
    @Override public ServletContext getContext(String uripath) { return this; }
    @Override public int getMajorVersion() { return 5; }
    @Override public int getMinorVersion() { return 0; }
    @Override public int getEffectiveMajorVersion() { return 5; }
    @Override public int getEffectiveMinorVersion() { return 0; }
    @Override public String getMimeType(String file) { return null; }
    @Override public Set<String> getResourcePaths(String path) { return null; }
    @Override public URL getResource(String path) { return null; }
    @Override public InputStream getResourceAsStream(String path) { return null; }
    @Override public RequestDispatcher getRequestDispatcher(String path) { return null; }
    @Override public RequestDispatcher getNamedDispatcher(String name) { return null; }
    @Override public Servlet getServlet(String name) { return null; }
    @Override public Enumeration<Servlet> getServlets() { return null; }
    @Override public Enumeration<String> getServletNames() { return null; }
    @Override public void log(String msg) {}
    @Override public void log(Exception exception, String msg) {}
    @Override public void log(String message, Throwable throwable) {}
    @Override public String getRealPath(String path) { return null; }
    @Override public String getServerInfo() { return "ServletContextSimulator"; }
    @Override public String getInitParameter(String name) { return null; }
    @Override public Enumeration<String> getInitParameterNames() { return null; }
    @Override public boolean setInitParameter(String name, String value) { return false; }
    @Override public String getServletContextName() { return "MockServletContext"; }
    @Override public ServletRegistration.Dynamic addServlet(String servletName, String className) { return null; }
    @Override public ServletRegistration.Dynamic addServlet(String servletName, Servlet servlet) { return null; }
    @Override public ServletRegistration.Dynamic addServlet(String servletName, Class<? extends Servlet> servletClass) { return null; }
    @Override public <T extends Servlet> T createServlet(Class<T> clazz) { return null; }
    @Override public ServletRegistration getServletRegistration(String servletName) { return null; }
    @Override public Map<String, ? extends ServletRegistration> getServletRegistrations() { return null; }
    @Override public FilterRegistration.Dynamic addFilter(String filterName, String className) { return null; }
    @Override public FilterRegistration.Dynamic addFilter(String filterName, Filter filter) { return null; }
    @Override public FilterRegistration.Dynamic addFilter(String filterName, Class<? extends Filter> filterClass) { return null; }
    @Override public <T extends Filter> T createFilter(Class<T> clazz) { return null; }
    @Override public FilterRegistration getFilterRegistration(String filterName) { return null; }
    @Override public Map<String, ? extends FilterRegistration> getFilterRegistrations() { return null; }
    @Override public SessionCookieConfig getSessionCookieConfig() { return null; }
    @Override public void setSessionTrackingModes(Set<SessionTrackingMode> sessionTrackingModes) {}
    @Override public Set<SessionTrackingMode> getDefaultSessionTrackingModes() { return null; }
    @Override public Set<SessionTrackingMode> getEffectiveSessionTrackingModes() { return null; }
    @Override public void addListener(String className) {}
    @Override public <T extends EventListener> void addListener(T t) {}
    @Override public void addListener(Class<? extends EventListener> listenerClass) {}
    @Override public <T extends EventListener> T createListener(Class<T> clazz) { return null; }
    @Override public JspConfigDescriptor getJspConfigDescriptor() { return null; }
    @Override public ClassLoader getClassLoader() { return null; }
    @Override public void declareRoles(String... roleNames) {}
    @Override public String getVirtualServerName() { return "localhost"; }
}
